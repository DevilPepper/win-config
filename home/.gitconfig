[user]
  email = Stuff_Git_NaoResposta@outlook.com
  name  = SupaStuff
[include]
  path = ~/work.gitconfig
	path = ~/secret.gitconfig
[alias]
  co          = checkout
  lg          = log --oneline --decorate --graph --all

  about       = ! git description $(git branch | grep \\* | cut -d ' ' -f2)
  alias       = ! git config --get-regexp alias | sed 's/alias\\./git /'
  amend       = ! git commit --amend --no-edit
  over-here   = ! git fetch origin $(git rev-parse --abbrev-ref HEAD) && git reset --hard FETCH_HEAD
  rmignored   = ! git ls-files -i --exclude-from=.gitignore | xargs --no-run-if-empty git rm --cached
  # Doesn't work
  untag       = ! DEAD_TAGS=$(comm <(git tag --merged master | sort) <(git tag -l | sort) -13) && git tag -d $DEAD_TAGS && git push --delete origin $DEAD_TAGS

  conflux     = ! git_diff_upstream_local | xargs --no-run-if-empty git delete
  trim        = ! git_diff_remote_local | xargs --no-run-if-empty git branch -d

  delete      = "!git_delete() { git branch -D $*; git push origin --delete $*; }; git_delete"
  description = "!git_describe() { git config branch.$1.description; }; git_describe"
  new         = "!git_new() { git checkout -b $1 && git push -u origin $1 || git checkout -; }; git_new"
  sync        = "!git_sync() { git checkout $1 && git pull upstream $1 && git push --force; git checkout -; }; git_sync"

  bb          = "!git_bb() { repo=$1; shift; git clone git@bitbucket.org:$repo.git $*; }; git_bb"
  gh          = "!git_gh() { repo=$1; shift; git clone git@github.com:$repo.git $*; }; git_gh"
  gl          = "!git_gl() { repo=$1; shift; git clone git@gitlab.com:$repo.git $*; }; git_gl"
[core]
  editor = vim
  filemode = true
  hooksPath = .githooks
[commit]
  gpgsign = true
[fetch]
  prune = true
[push]
  default = simple
[init]
  defaultBranch = main
[gpg]
	program = "C:/Program Files (x86)/gnupg/bin/gpg.exe"
[credential]
	modalPrompt = false
